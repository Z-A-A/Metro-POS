Index: src/main/java/org/ZAA/backend/Model/BranchManagerModel.java
===================================================================
diff --git a/src/main/java/org/ZAA/backend/Model/BranchManagerModel.java b/src/main/java/org/ZAA/backend/Model/BranchManagerModel.java
deleted file mode 100644
--- a/src/main/java/org/ZAA/backend/Model/BranchManagerModel.java	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
+++ /dev/null	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
@@ -1,80 +0,0 @@
-package org.ZAA.Model;
-
-public class BranchManagerModel {
-    private String branchName;
-    private String branchAddress;
-    private String branchPhone;
-    private String branchEmail;
-    private String branchManagerName;
-    private String branchManagerPhone;
-    private String branchManagerEmail;
-
-    public BranchManagerModel(String branchName, String branchAddress, String branchPhone, String branchEmail, String branchManagerName, String branchManagerPhone, String branchManagerEmail) {
-        this.branchName = branchName;
-        this.branchAddress = branchAddress;
-        this.branchPhone = branchPhone;
-        this.branchEmail = branchEmail;
-        this.branchManagerName = branchManagerName;
-        this.branchManagerPhone = branchManagerPhone;
-        this.branchManagerEmail = branchManagerEmail;
-    }
-
-    public BranchManagerModel() {
-    }
-
-    public String getBranchName() {
-        return branchName;
-    }
-
-    public void setBranchName(String branchName) {
-        this.branchName = branchName;
-    }
-
-    public String getBranchAddress() {
-        return branchAddress;
-    }
-
-    public void setBranchAddress(String branchAddress) {
-        this.branchAddress = branchAddress;
-    }
-
-    public String getBranchPhone() {
-        return branchPhone;
-    }
-
-    public void setBranchPhone(String branchPhone) {
-        this.branchPhone = branchPhone;
-    }
-
-    public String getBranchEmail() {
-        return branchEmail;
-    }
-
-    public void setBranchEmail(String branchEmail) {
-        this.branchEmail = branchEmail;
-    }
-
-    public String getBranchManagerName() {
-        return branchManagerName;
-    }
-
-    public void setBranchManagerName(String branchManagerName) {
-        this.branchManagerName = branchManagerName;
-    }
-
-    public String getBranchManagerPhone() {
-        return branchManagerPhone;
-    }
-
-    public void setBranchManagerPhone(String branchManagerPhone) {
-        this.branchManagerPhone = branchManagerPhone;
-    }
-
-    public String getBranchManagerEmail() {
-        return branchManagerEmail;
-    }
-
-    public void setBranchManagerEmail(String branchManagerEmail) {
-        this.branchManagerEmail = branchManagerEmail;
-    }
-}
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
+++ /dev/null	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: src/main/java/org/ZAA/Controller/DataEntryOperator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/DataEntryOperator.java b/src/main/java/org/ZAA/Controller/DataEntryOperator.java
new file mode 100644
--- /dev/null	(date 1732348270793)
+++ b/src/main/java/org/ZAA/Controller/DataEntryOperator.java	(date 1732348270793)
@@ -0,0 +1,69 @@
+package org.ZAA.Controller;
+
+public class DataEntryOperator
+{
+    private String name;
+    private int employeeNumber;
+    private String email;
+    private String password;
+    private String branchCode;
+    private double salary;
+
+    public DataEntryOperator(String name, int employeeNumber, String email, String branchCode, double salary)
+    {
+        this.name = name;
+        this.employeeNumber = employeeNumber;
+        this.email = email;
+        this.password = "Password_123";
+        this.branchCode = branchCode;
+        this.salary = salary;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getEmployeeNumber() {
+        return employeeNumber;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getBranchCode() {
+        return branchCode;
+    }
+
+    public double getSalary() {
+        return salary;
+    }
+
+    public void setBranchCode(String branchCode) {
+        this.branchCode = branchCode;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public void setEmployeeNumber(int employeeNumber) {
+        this.employeeNumber = employeeNumber;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setSalary(double salary) {
+        this.salary = salary;
+    }
+}
Index: src/main/java/org/ZAA/Controller/METRO_POS_MAIN_CONTROLLER_CODE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/METRO_POS_MAIN_CONTROLLER_CODE.java b/src/main/java/org/ZAA/Controller/METRO_POS_MAIN_CONTROLLER_CODE.java
new file mode 100644
--- /dev/null	(date 1732348270796)
+++ b/src/main/java/org/ZAA/Controller/METRO_POS_MAIN_CONTROLLER_CODE.java	(date 1732348270796)
@@ -0,0 +1,461 @@
+package org.ZAA.Controller;
+
+import java.util.*;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/api")
+public class METRO_POS_MAIN_CONTROLLER_CODE
+{
+    private List<SuperAdmin> superAdmins;
+    private List<BranchManagement> branches;
+
+    private List<BranchManager> admins;
+    private List<Cashier> cashiers;
+    private List<DataEntryOperator> dataEntryOperators;
+
+    public METRO_POS_MAIN_CONTROLLER_CODE()
+    {
+        this.superAdmins = new ArrayList<>();
+        this.branches = new ArrayList<>();
+        this.admins = new ArrayList<>();
+        this.cashiers = new ArrayList<>();
+        this.dataEntryOperators = new ArrayList<>();
+    }
+
+    public void loadData()
+    {
+        // LOAD DATA FROM DATABASE INTO LISTS.
+        TEST_LOAD_WITHOUT_DB();
+    }
+
+    public void syncDataToDataBase()
+    {
+        //STORE DATA COLLECTIONS INTO
+    }
+
+    //TESTING METHOD.
+    public void TEST_LOAD_WITHOUT_DB()
+    {
+        SuperAdmin superAdmin1 = new SuperAdmin("Admin1", "admin1@example.com", "admin123");
+        superAdmin1.setMainController(this);
+        SuperAdmin superAdmin2 = new SuperAdmin("Admin2", "admin2@example.com", "admin123");
+        superAdmin2.setMainController(this);
+        superAdmins.add(superAdmin1);
+        superAdmins.add(superAdmin2);
+        System.out.println("SUPER ADMINS LOADED SUCCESSFULLY");
+
+        Branch branch1 = new Branch("B001", "Main Branch", "City A", true, "123 Street", "123-456-7890");
+        BranchManagement branchManagement1 = new BranchManagement(branch1);
+        Branch branch2 = new Branch("B002", "Secondary Branch", "City B", true, "456 Avenue", "987-654-3210");
+        BranchManagement branchManagement2 = new BranchManagement(branch2);
+        branches.add(branchManagement1);
+        branches.add(branchManagement2);
+        System.out.println("BRANCHES LOADED SUCCESSFULLY");
+
+        BranchManager branchManager1 = new BranchManager("Alice", 101, "alice@example.com", "B001", 50000);
+        branchManager1.setMainController(this);
+        branchManagement1.addBranchManager(branchManager1);
+        admins.add(branchManager1);
+
+        BranchManager branchManager2 = new BranchManager("Bob", 102, "bob@example.com", "B002", 55000);
+        branchManager2.setMainController(this);
+        branchManagement2.addBranchManager(branchManager2);
+        admins.add(branchManager2);
+
+        Cashier cashier1 = new Cashier("John", 201, "john@example.com", "B001", 30000);
+        branchManagement1.addCashier(cashier1);
+        cashiers.add(cashier1);
+
+        Cashier cashier2 = new Cashier("Jane", 202, "jane@example.com", "B002", 32000);
+        branchManagement2.addCashier(cashier2);
+        cashiers.add(cashier2);
+
+        DataEntryOperator dataEntryOperator1 = new DataEntryOperator("Charlie", 301, "charlie@example.com", "B001", 25000);
+        branchManagement1.addDataEntryOperator(dataEntryOperator1);
+        dataEntryOperators.add(dataEntryOperator1);
+
+        DataEntryOperator dataEntryOperator2 = new DataEntryOperator("David", 302, "david@example.com", "B002", 27000);
+        branchManagement2.addDataEntryOperator(dataEntryOperator2);
+        dataEntryOperators.add(dataEntryOperator2);
+
+        System.out.println("BRANCH DATA LOADED SUCCESSFULLY");
+    }
+
+    //LOGIN METHODS FOR GUI.
+
+    @GetMapping("/login/superadmin")
+    public SuperAdmin loginSuperAdmin(@RequestParam String email, @RequestParam String password) {
+        for (SuperAdmin superAdmin : superAdmins) {
+            if (superAdmin.getEmail().equals(email) && superAdmin.getPassword().equals(password)) {
+                System.out.println("SUPER ADMIN LOGIN SUCCESSFUL");
+                return superAdmin;
+            }
+        }
+        System.out.println("SUPER ADMIN LOGIN FAILED");
+        return null;
+    }
+
+    @GetMapping("/login/admin")
+    public BranchManager loginAdmin(@RequestParam String email, @RequestParam String password) {
+        for (BranchManager admin : admins) {
+            if (admin.getEmail().equals(email) && admin.getPassword().equals(password)) {
+                System.out.println("BRANCH MANAGER LOGIN SUCCESSFUL");
+                return admin;
+            }
+        }
+        System.out.println("BRANCH MANAGER LOGIN FAILED");
+        return null;
+    }
+
+    @GetMapping("/login/cashier")
+    public Cashier loginCashier(@RequestParam String email, @RequestParam String password) {
+        for (Cashier cashier : cashiers) {
+            if (cashier.getEmail().equals(email) && cashier.getPassword().equals(password)) {
+                System.out.println("CASHIER LOGIN SUCCESSFUL");
+                return cashier;
+            }
+        }
+        System.out.println("CASHIER LOGIN FAILED");
+        return null;
+    }
+
+    @GetMapping("/login/dataentryoperator")
+    public DataEntryOperator loginDataEntryOperator(@RequestParam String email, @RequestParam String password) {
+        for (DataEntryOperator dataEntryOperator : dataEntryOperators) {
+            if (dataEntryOperator.getEmail().equals(email) && dataEntryOperator.getPassword().equals(password)) {
+                System.out.println("DATA ENTRY OPERATOR LOGIN SUCCESSFUL");
+                return dataEntryOperator;
+            }
+        }
+        System.out.println("DATA ENTRY OPERATOR LOGIN FAILED");
+        return null;
+    }
+
+    //SIGN UP METHODS FOR GUI.
+
+    public void signUpSuperAdmin() {
+        Scanner scanner = new Scanner(System.in);
+        System.out.print("Enter Super Admin Name: ");
+        String name = scanner.nextLine();
+        System.out.print("Enter Super Admin Email: ");
+        String email = scanner.nextLine();
+        System.out.print("Enter Super Admin Password: ");
+        String password = scanner.nextLine();
+        SuperAdmin newSuperAdmin = new SuperAdmin(name, email, password);
+        superAdmins.add(newSuperAdmin);
+        // ALSO ADD IN DATABASEEE HERE==============================
+        System.out.println("SUPER ADMIN SIGN UP SUCCESSFUL: " + newSuperAdmin.getName());
+    }
+
+    @PostMapping("/signup/branchmanager")
+    public boolean signUpBranchManager(@RequestParam String name, @RequestParam String email, @RequestParam String password, @RequestParam String branchCode, @RequestParam double salary) {
+        BranchManager newBranchManager = new BranchManager(name, admins.size() + 1, email, branchCode, salary);
+        admins.add(newBranchManager);
+        // ALSO ADD IN DATABASEEE HERE ===============================
+        System.out.println("ADMIN (BRANCH MANAGER) ADDED SUCCESSFULLY: " + newBranchManager.getName());
+        return true;
+    }
+
+    @PostMapping("/signup/cashier")
+    public boolean signUpCashier(@RequestParam String name, @RequestParam String email, @RequestParam String password, @RequestParam String branchCode, @RequestParam double salary) {
+        Cashier newCashier = new Cashier(name, cashiers.size() + 1, email, branchCode, salary);
+        cashiers.add(newCashier);
+        // ALSO ADD IN DATABASEEEEE HERE ===============================
+        System.out.println("CASHIER ADDED SUCCESSFULLY: " + newCashier.getName());
+        return true;
+    }
+
+    @PostMapping("/signup/dataentryoperator")
+    public boolean signUpDataEntryOperator(@RequestParam String name, @RequestParam String email, @RequestParam String password, @RequestParam String branchCode, @RequestParam double salary) {
+        DataEntryOperator newDataEntryOperator = new DataEntryOperator(name, dataEntryOperators.size() + 1, email, branchCode, salary);
+        dataEntryOperators.add(newDataEntryOperator);
+        // ALSO ADD IN DATABASEEE HERE ===============================
+        System.out.println("DATA ENTRY OPERATOR ADDED SUCCESSFULLY: " + newDataEntryOperator.getName());
+        return true;
+    }
+
+    //PASSWORD CHANGE METHODS FOR GUI.
+
+    @PostMapping("/changePassword/superadmin")
+    public boolean changeSuperAdminPassword(@RequestParam String email, @RequestParam String oldPassword, @RequestParam String newPassword) {
+        for (SuperAdmin superAdmin : superAdmins) {
+            if (superAdmin.getEmail().equals(email) && superAdmin.getPassword().equals(oldPassword)) {
+                superAdmin.setPassword(newPassword);
+                //CHANGE IN DB HERE==============================
+                System.out.println("SUPER ADMIN PASSWORD CHANGED SUCCESSFULLY");
+                return true;
+            }
+        }
+        System.out.println("SUPER ADMIN PASSWORD CHANGE FAILED");
+        return false;
+    }
+
+    @PostMapping("/changePassword/branchmanager")
+    public boolean changeBranchManagerPassword(@RequestParam String email, @RequestParam String oldPassword, @RequestParam String newPassword) {
+        for (BranchManager admin : admins) {
+            if (admin.getEmail().equals(email) && admin.getPassword().equals(oldPassword)) {
+                admin.setPassword(newPassword);
+                //CHANGE IN DB HERE==============================
+                System.out.println("BRANCH MANAGER PASSWORD CHANGED SUCCESSFULLY");
+                return true;
+            }
+        }
+        System.out.println("BRANCH MANAGER PASSWORD CHANGE FAILED");
+        return false;
+    }
+
+    @PostMapping("/changePassword/cashier")
+    public boolean changeCashierPassword(@RequestParam String email, @RequestParam String oldPassword, @RequestParam String newPassword) {
+        for (Cashier cashier : cashiers) {
+            if (cashier.getEmail().equals(email) && cashier.getPassword().equals(oldPassword)) {
+                cashier.setPassword(newPassword);
+                //CHANGE IN DB HERE==============================
+                System.out.println("CASHIER PASSWORD CHANGED SUCCESSFULLY");
+                return true;
+            }
+        }
+        System.out.println("CASHIER PASSWORD CHANGE FAILED");
+        return false;
+    }
+
+    @PostMapping("/changePassword/dataentryoperator")
+    public boolean changeDataEntryOperatorPassword(@RequestParam String email, @RequestParam String oldPassword, @RequestParam String newPassword) {
+        for (DataEntryOperator dataEntryOperator : dataEntryOperators) {
+            if (dataEntryOperator.getEmail().equals(email) && dataEntryOperator.getPassword().equals(oldPassword)) {
+                dataEntryOperator.setPassword(newPassword);
+                //CHANGE IN DB HERE==============================
+                System.out.println("DATA ENTRY OPERATOR PASSWORD CHANGED SUCCESSFULLY");
+                return true;
+            }
+        }
+        System.out.println("DATA ENTRY OPERATOR PASSWORD CHANGE FAILED");
+        return false;
+    }
+
+    public List<BranchManager> getAdmins() {
+        return admins;
+    }
+
+    public void setAdmins(List<BranchManager> admins) {
+        this.admins = admins;
+    }
+
+    public List<BranchManagement> getBranches() {
+        return branches;
+    }
+
+    public void setBranches(List<BranchManagement> branches) {
+        this.branches = branches;
+    }
+
+    public List<Cashier> getCashiers() {
+        return cashiers;
+    }
+
+    public void setCashiers(List<Cashier> cashiers) {
+        this.cashiers = cashiers;
+    }
+
+    public List<DataEntryOperator> getDataEntryOperators() {
+        return dataEntryOperators;
+    }
+
+    public void setDataEntryOperators(List<DataEntryOperator> dataEntryOperators) {
+        this.dataEntryOperators = dataEntryOperators;
+    }
+
+    public List<SuperAdmin> getSuperAdmins() {
+        return superAdmins;
+    }
+
+    public void setSuperAdmins(List<SuperAdmin> superAdmins) {
+        this.superAdmins = superAdmins;
+    }
+
+    public static void main(String[] args)
+    {
+        METRO_POS_MAIN_CONTROLLER_CODE controller = new METRO_POS_MAIN_CONTROLLER_CODE();
+
+        controller.loadData();
+
+        Scanner scanner = new Scanner(System.in);
+
+        while (true)
+        {
+            System.out.println("========= WELCOME TO METRO POS SYSTEM =========");
+            System.out.println("1. Login as Super Admin");
+            System.out.println("2. Login as Branch Manager");
+            System.out.println("3. Login as Cashier");
+            System.out.println("4. Login as Data Entry Operator");
+            System.out.println("5. Exit");
+            System.out.print("Enter your choice: ");
+            int choice = scanner.nextInt();
+            scanner.nextLine();
+
+            switch (choice)
+            {
+                case 1:
+                    System.out.println("Enter Super Admin Email: ");
+                    String superAdminEmail = scanner.nextLine();
+                    System.out.println("Enter Super Admin Password: ");
+                    String superAdminPassword = scanner.nextLine();
+                    SuperAdmin superAdmin = controller.loginSuperAdmin(superAdminEmail, superAdminPassword);
+
+                    if (superAdmin != null)
+                    {
+                        System.out.println("1. Create Branch");
+                        System.out.println("2. Add Branch Manager");
+                        System.out.println("3. Add Cashier");
+                        System.out.println("4. Add Data Entry Operator");
+                        System.out.println("5. Logout");
+                        System.out.print("Enter your choice: ");
+                        int superAdminChoice = scanner.nextInt();
+                        scanner.nextLine();
+
+                        switch (superAdminChoice)
+                        {
+                            case 1:
+                                System.out.println("Enter Branch Code: ");
+                                String branchCode = scanner.nextLine();
+                                System.out.println("Enter Branch Name: ");
+                                String branchName = scanner.nextLine();
+                                System.out.println("Enter Branch City: ");
+                                String branchCity = scanner.nextLine();
+                                System.out.println("Enter Branch Address: ");
+                                String branchAddress = scanner.nextLine();
+                                System.out.println("Enter Branch Phone: ");
+                                String branchPhone = scanner.nextLine();
+                                System.out.println("Is the branch active? (true/false): ");
+                                boolean branchActive = scanner.nextBoolean();
+                                superAdmin.createBranch(branchCode, branchName, branchCity, branchActive, branchAddress, branchPhone);
+                                break;
+                            case 2:
+                                System.out.println("Enter Name: ");
+                                String adminName = scanner.nextLine();
+                                System.out.println("Enter Email: ");
+                                String adminEmail = scanner.nextLine();
+                                System.out.println("Enter Password: ");
+                                String adminPassword = scanner.nextLine();
+                                System.out.println("Enter Branch Code: ");
+                                String adminBranchCode = scanner.nextLine();
+                                System.out.println("Enter Salary: ");
+                                double adminSalary = scanner.nextDouble();
+                                controller.signUpBranchManager(adminName, adminEmail, adminPassword, adminBranchCode, adminSalary);
+                                break;
+                            case 3:
+                                System.out.println("Enter Name: ");
+                                String cashierName = scanner.nextLine();
+                                System.out.println("Enter Email: ");
+                                String cashierEmail = scanner.nextLine();
+                                System.out.println("Enter Password: ");
+                                String cashierPassword = scanner.nextLine();
+                                System.out.println("Enter Branch Code: ");
+                                String cashierBranchCode = scanner.nextLine();
+                                System.out.println("Enter Salary: ");
+                                double cashierSalary = scanner.nextDouble();
+                                controller.signUpCashier(cashierName, cashierEmail, cashierPassword, cashierBranchCode, cashierSalary);
+                                break;
+                            case 4:
+                                System.out.println("Enter Name: ");
+                                String dataEntryName = scanner.nextLine();
+                                System.out.println("Enter Email: ");
+                                String dataEntryEmail = scanner.nextLine();
+                                System.out.println("Enter Password: ");
+                                String dataEntryPassword = scanner.nextLine();
+                                System.out.println("Enter Branch Code: ");
+                                String dataEntryBranchCode = scanner.nextLine();
+                                System.out.println("Enter Salary: ");
+                                double dataEntrySalary = scanner.nextDouble();
+                                controller.signUpDataEntryOperator(dataEntryName, dataEntryEmail, dataEntryPassword, dataEntryBranchCode, dataEntrySalary);
+                                break;
+                            case 5:
+                                System.out.println("Logging out...");
+                                break;
+                            default:
+                                System.out.println("Invalid choice.");
+                        }
+                    }
+                    break;
+
+                case 2:
+                    System.out.println("Enter Branch Manager Email: ");
+                    String managerEmail = scanner.nextLine();
+                    System.out.println("Enter Branch Manager Password: ");
+                    String managerPassword = scanner.nextLine();
+                    BranchManager branchManager = controller.loginAdmin(managerEmail, managerPassword);
+
+                    if (branchManager != null) {
+                        System.out.println("1. Add Cashier");
+                        System.out.println("2. Add Data Entry Operator");
+                        System.out.println("3. Logout");
+                        System.out.print("Enter your choice: ");
+                        int managerChoice = scanner.nextInt();
+                        scanner.nextLine();
+
+                        switch (managerChoice) {
+                            case 1:
+                                System.out.println("Enter Name: ");
+                                String cashierNameBM = scanner.nextLine();
+                                System.out.println("Enter Email: ");
+                                String cashierEmailBM = scanner.nextLine();
+                                System.out.println("Enter Password: ");
+                                String cashierPasswordBM = scanner.nextLine();
+                                System.out.println("Enter Salary: ");
+                                double cashierSalaryBM = scanner.nextDouble();
+                                branchManager.addCashier(cashierNameBM, cashierEmailBM, cashierPasswordBM, cashierSalaryBM);
+                                break;
+                            case 2:
+                                System.out.println("Enter Name: ");
+                                String dataEntryNameBM = scanner.nextLine();
+                                System.out.println("Enter Email: ");
+                                String dataEntryEmailBM = scanner.nextLine();
+                                System.out.println("Enter Password: ");
+                                String dataEntryPasswordBM = scanner.nextLine();
+                                System.out.println("Enter Salary: ");
+                                double dataEntrySalaryBM = scanner.nextDouble();
+                                branchManager.addDataEntryOperator(dataEntryNameBM, dataEntryEmailBM, dataEntryPasswordBM, dataEntrySalaryBM);
+                                break;
+                            case 3:
+                                System.out.println("Logging out...");
+                                break;
+                            default:
+                                System.out.println("Invalid choice.");
+                        }
+                    }
+                    break;
+
+                case 3:
+                    System.out.println("Enter Cashier Email: ");
+                    String cashierEmailLogin = scanner.nextLine();
+                    System.out.println("Enter Cashier Password: ");
+                    String cashierPasswordLogin = scanner.nextLine();
+                    Cashier cashier = controller.loginCashier(cashierEmailLogin, cashierPasswordLogin);
+
+                    if (cashier != null) {
+                        System.out.println("Functionality to be implemented.");
+                    }
+                    break;
+
+                case 4:
+                    System.out.println("Enter Data Entry Operator Email: ");
+                    String dataEntryEmailLogin = scanner.nextLine();
+                    System.out.println("Enter Data Entry Operator Password: ");
+                    String dataEntryPasswordLogin = scanner.nextLine();
+                    DataEntryOperator dataEntryOperator = controller.loginDataEntryOperator(dataEntryEmailLogin, dataEntryPasswordLogin);
+
+                    if (dataEntryOperator != null) {
+                        System.out.println("Functionality to be implemented.");
+                    }
+                    break;
+
+                case 5:
+                    System.out.println("Exiting...");
+                    return;
+
+                default:
+                    System.out.println("Invalid choice.");
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/BranchManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/BranchManager.java b/src/main/java/org/ZAA/Controller/BranchManager.java
new file mode 100644
--- /dev/null	(date 1732348270790)
+++ b/src/main/java/org/ZAA/Controller/BranchManager.java	(date 1732348270790)
@@ -0,0 +1,110 @@
+package org.ZAA.Controller;
+
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/api")
+public class BranchManager
+{
+    private String name;
+    private int employeeNumber;
+    private String email;
+    private String password;
+    private String branchCode;
+    private double salary;
+    private METRO_POS_MAIN_CONTROLLER_CODE mainController;
+
+    public BranchManager(String name, int employeeNumber, String email, String branchCode, double salary)
+    {
+        this.name = name;
+        this.employeeNumber = employeeNumber;
+        this.email = email;
+        this.password = "Password_123";
+        this.branchCode = branchCode;
+        this.salary = salary;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getEmployeeNumber() {
+        return employeeNumber;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getBranchCode() {
+        return branchCode;
+    }
+
+    public double getSalary() {
+        return salary;
+    }
+
+    public void setBranchCode(String branchCode) {
+        this.branchCode = branchCode;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public void setEmployeeNumber(int employeeNumber) {
+        this.employeeNumber = employeeNumber;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setSalary(double salary) {
+        this.salary = salary;
+    }
+
+    public void setMainController(METRO_POS_MAIN_CONTROLLER_CODE mainController) {
+        this.mainController = mainController;
+    }
+
+    @PostMapping("/addCashier")
+    public boolean addCashier(@RequestParam String name, @RequestParam String email, @RequestParam String password, @RequestParam double salary) {
+        Cashier newCashier = new Cashier(name, mainController.getCashiers().size() + 1, email, branchCode, salary);
+        mainController.getCashiers().add(newCashier);
+        for (BranchManagement branchManagement : mainController.getBranches()) {
+            if (branchManagement.getBranch().getBranchCode().equals(branchCode)) {
+                branchManagement.addCashier(newCashier);
+                // Add to DB here
+                System.out.println("CASHIER ADDED SUCCESSFULLY: " + newCashier.getName());
+                return true;
+            }
+        }
+        System.out.println("CASHIER ADDITION FAILED");
+        return false;
+    }
+
+    @PostMapping("/addDataEntryOperator")
+    public boolean addDataEntryOperator(@RequestParam String name, @RequestParam String email, @RequestParam String password, @RequestParam double salary) {
+        DataEntryOperator newDataEntryOperator = new DataEntryOperator(name, mainController.getDataEntryOperators().size() + 1, email, branchCode, salary);
+        mainController.getDataEntryOperators().add(newDataEntryOperator);
+        for (BranchManagement branchManagement : mainController.getBranches()) {
+            if (branchManagement.getBranch().getBranchCode().equals(branchCode)) {
+                branchManagement.addDataEntryOperator(newDataEntryOperator);
+                // Add to DB here
+                System.out.println("DATA ENTRY OPERATOR ADDED SUCCESSFULLY: " + newDataEntryOperator.getName());
+                return true;
+            }
+        }
+        System.out.println("DATA ENTRY OPERATOR ADDITION FAILED");
+        return false;
+    }
+}
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/Cashier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Cashier.java b/src/main/java/org/ZAA/Controller/Cashier.java
new file mode 100644
--- /dev/null	(date 1732348270792)
+++ b/src/main/java/org/ZAA/Controller/Cashier.java	(date 1732348270792)
@@ -0,0 +1,69 @@
+package org.ZAA.Controller;
+
+public class Cashier
+{
+    private String name;
+    private int employeeNumber;
+    private String email;
+    private String password;
+    private String branchCode;
+    private double salary;
+
+    public Cashier(String name, int employeeNumber, String email, String branchCode, double salary)
+    {
+        this.name = name;
+        this.employeeNumber = employeeNumber;
+        this.email = email;
+        this.password = "Password_123";
+        this.branchCode = branchCode;
+        this.salary = salary;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getEmployeeNumber() {
+        return employeeNumber;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getBranchCode() {
+        return branchCode;
+    }
+
+    public double getSalary() {
+        return salary;
+    }
+
+    public void setBranchCode(String branchCode) {
+        this.branchCode = branchCode;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public void setEmployeeNumber(int employeeNumber) {
+        this.employeeNumber = employeeNumber;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setSalary(double salary) {
+        this.salary = salary;
+    }
+}
Index: src/main/java/org/ZAA/Controller/SuperAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/SuperAdmin.java b/src/main/java/org/ZAA/Controller/SuperAdmin.java
new file mode 100644
--- /dev/null	(date 1732348270799)
+++ b/src/main/java/org/ZAA/Controller/SuperAdmin.java	(date 1732348270799)
@@ -0,0 +1,62 @@
+package org.ZAA.Controller;
+
+import java.util.List;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/api")
+public class SuperAdmin
+{
+    private String name;
+    private String email;
+    private String password;
+    private METRO_POS_MAIN_CONTROLLER_CODE mainController;
+
+    public SuperAdmin(String name, String email, String password)
+    {
+        this.name = name;
+        this.email = email;
+        this.password = password;
+    }
+
+    public String getName()
+    {
+        return name;
+    }
+
+    public String getEmail()
+    {
+        return email;
+    }
+
+    public String getPassword()
+    {
+        return password;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setMainController(METRO_POS_MAIN_CONTROLLER_CODE mainController) {
+        this.mainController = mainController;
+    }
+
+    @PostMapping("/createBranch")
+    public boolean createBranch(@RequestParam String branchCode, @RequestParam String name, @RequestParam String city, @RequestParam boolean isActive, @RequestParam String address, @RequestParam String phone) {
+        Branch newBranch = new Branch(branchCode, name, city, isActive, address, phone);
+        BranchManagement newBranchManagement = new BranchManagement(newBranch);
+        mainController.getBranches().add(newBranchManagement);
+        //UPDATE IN DB HERE
+        System.out.println("BRANCH CREATED SUCCESSFULLY: " + name);
+        return true;
+    }
+}
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/Vendor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Vendor.java b/src/main/java/org/ZAA/Controller/Vendor.java
new file mode 100644
--- /dev/null	(date 1732348270800)
+++ b/src/main/java/org/ZAA/Controller/Vendor.java	(date 1732348270800)
@@ -0,0 +1,6 @@
+package org.ZAA.Controller;
+
+public class Vendor
+{
+
+}
Index: src/main/java/org/ZAA/Controller/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Product.java b/src/main/java/org/ZAA/Controller/Product.java
new file mode 100644
--- /dev/null	(date 1732348270796)
+++ b/src/main/java/org/ZAA/Controller/Product.java	(date 1732348270796)
@@ -0,0 +1,6 @@
+package org.ZAA.Controller;
+
+public class Product
+{
+
+}
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/Report.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Report.java b/src/main/java/org/ZAA/Controller/Report.java
new file mode 100644
--- /dev/null	(date 1732348270798)
+++ b/src/main/java/org/ZAA/Controller/Report.java	(date 1732348270798)
@@ -0,0 +1,6 @@
+package org.ZAA.Controller;
+
+public class Report
+{
+
+}
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>METRO-POS</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
+++ b/pom.xml	(date 1732348270784)
@@ -5,13 +5,103 @@
     <modelVersion>4.0.0</modelVersion>
 
     <groupId>org.example</groupId>
-    <artifactId>METRO-POS</artifactId>
+    <artifactId>metro-pos</artifactId>
     <version>1.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>Metro POS</name>
+    <description>Metro POS Backend</description>
 
     <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
+        <java.version>17</java.version>
+        <spring-boot.version>3.1.3</spring-boot.version>
+        <maven.compiler.source>${java.version}</maven.compiler.source>
+        <maven.compiler.target>${java.version}</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
 
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>3.1.3</version>
+        <relativePath/>
+    </parent>
+
+    <dependencies>
+        <!-- Spring Boot Starter -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter</artifactId>
+        </dependency>
+
+        <!-- Spring Boot Web Starter -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+
+        <!-- Spring Boot Starter Data JPA -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+
+        <!-- MySQL Connector -->
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.33</version>
+        </dependency>
+
+        <!-- Lombok -->
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.28</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Spring Boot DevTools -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-devtools</artifactId>
+            <optional>true</optional>
+            <scope>runtime</scope>
+        </dependency>
+
+        <!-- Spring Boot Starter Test -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <!-- Spring Boot Maven Plugin -->
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+
+            <!-- Maven Compiler Plugin -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.8.1</version>
+                <configuration>
+                    <source>${java.version}</source>
+                    <target>${java.version}</target>
+                </configuration>
+            </plugin>
+
+            <!-- Maven Surefire Plugin -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>3.0.0</version>
+            </plugin>
+        </plugins>
+    </build>
 </project>
\ No newline at end of file
Index: src/main/java/org/ZAA/backend/Controller/SuperAdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.ZAA.backend.Controller;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class SuperAdminController {\r\n\r\n    private static final String DB_URL = \"jdbc:postgresql://localhost:5432/your_database\";\r\n    private static final String DB_USER = \"your_username\";\r\n    private static final String DB_PASSWORD = \"your_password\";\r\n\r\n    public SuperAdmin getSuperAdminById(int superAdminId) {\r\n        SuperAdmin superAdmin = null;\r\n        String query = \"SELECT * FROM SuperAdmin WHERE SuperAdminID = ?\";\r\n\r\n        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);\r\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\r\n\r\n            preparedStatement.setInt(1, superAdminId);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n            if (resultSet.next()) {\r\n                superAdmin = new SuperAdmin();\r\n                superAdmin.setSuperAdminID(resultSet.getInt(\"SuperAdminID\"));\r\n                superAdmin.setName(resultSet.getString(\"Name\"));\r\n                superAdmin.setEmail(resultSet.getString(\"Email\"));\r\n                superAdmin.setPassword(resultSet.getString(\"Password\"));\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return superAdmin;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java b/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java
--- a/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
+++ b/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java	(date 1732348734675)
@@ -5,12 +5,13 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import org.ZAA.Controller.SuperAdmin;
 
 public class SuperAdminController {
 
-    private static final String DB_URL = "jdbc:postgresql://localhost:5432/your_database";
-    private static final String DB_USER = "your_username";
-    private static final String DB_PASSWORD = "your_password";
+    private static final String DB_URL = "sql12.freesqldatabase.com/sql12746761";
+    private static final String DB_USER = "sql12746761";
+    private static final String DB_PASSWORD = "Cr68DxeLq2";
 
     public SuperAdmin getSuperAdminById(int superAdminId) {
         SuperAdmin superAdmin = null;
@@ -23,11 +24,7 @@
             ResultSet resultSet = preparedStatement.executeQuery();
 
             if (resultSet.next()) {
-                superAdmin = new SuperAdmin();
-                superAdmin.setSuperAdminID(resultSet.getInt("SuperAdminID"));
-                superAdmin.setName(resultSet.getString("Name"));
-                superAdmin.setEmail(resultSet.getString("Email"));
-                superAdmin.setPassword(resultSet.getString("Password"));
+                superAdmin = new SuperAdmin(resultSet.getString("Name"), resultSet.getString("Email"), resultSet.getString("Password"));
             }
 
         } catch (SQLException e) {
@@ -36,4 +33,17 @@
 
         return superAdmin;
     }
+
+    public static void main(String[] args) {
+        SuperAdminController superAdminController = new SuperAdminController();
+        SuperAdmin superAdmin = superAdminController.getSuperAdminById(1);
+
+        if (superAdmin != null) {
+            System.out.println("Super Admin Name: " + superAdmin.getName());
+            System.out.println("Super Admin Email: " + superAdmin.getEmail());
+            System.out.println("Super Admin Password: " + superAdmin.getPassword());
+        } else {
+            System.out.println("Super Admin not found!");
+        }
+    }
 }
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 5603a06c26a3d5d1dbb5501036f5025604dab1af)
+++ b/.idea/vcs.xml	(date 1732348270774)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/Branch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Branch.java b/src/main/java/org/ZAA/Controller/Branch.java
new file mode 100644
--- /dev/null	(date 1732348270787)
+++ b/src/main/java/org/ZAA/Controller/Branch.java	(date 1732348270787)
@@ -0,0 +1,59 @@
+package org.ZAA.Controller;
+
+public class Branch
+{
+    private String branchCode;
+    private String name;
+    private String city;
+    private boolean isActive;
+    private String address;
+    private String phone;
+    private int numberOfEmployees;
+
+    public Branch(String branchCode, String name, String city, boolean isActive, String address, String phone)
+    {
+        this.branchCode = branchCode;
+        this.name = name;
+        this.city = city;
+        this.isActive = isActive;
+        this.address = address;
+        this.phone = phone;
+        this.numberOfEmployees = 0;
+    }
+
+    public String getBranchCode() {
+        return branchCode;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getCity() {
+        return city;
+    }
+
+    public boolean isActive() {
+        return isActive;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public String getPhone() {
+        return phone;
+    }
+
+    public int getNumberOfEmployees() {
+        return numberOfEmployees;
+    }
+
+    public void incrementEmployeeCount() {
+        numberOfEmployees++;
+    }
+
+    public void setActive(boolean isActive) {
+        this.isActive = isActive;
+    }
+}
Index: src/main/java/org/ZAA/Controller/BranchManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/BranchManagement.java b/src/main/java/org/ZAA/Controller/BranchManagement.java
new file mode 100644
--- /dev/null	(date 1732348270789)
+++ b/src/main/java/org/ZAA/Controller/BranchManagement.java	(date 1732348270789)
@@ -0,0 +1,50 @@
+package org.ZAA.Controller;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class BranchManagement
+{
+    private Branch branch;
+    private List<BranchManager> branchManagers;
+    private List<Cashier> cashiers;
+    private List<DataEntryOperator> dataEntryOperators;
+
+    public BranchManagement(Branch branch) {
+        this.branch = branch;
+        this.branchManagers = new ArrayList<>();
+        this.cashiers = new ArrayList<>();
+        this.dataEntryOperators = new ArrayList<>();
+    }
+
+    public Branch getBranch() {
+        return branch;
+    }
+
+    public List<BranchManager> getBranchManagers() {
+        return branchManagers;
+    }
+
+    public List<Cashier> getCashiers() {
+        return cashiers;
+    }
+
+    public List<DataEntryOperator> getDataEntryOperators() {
+        return dataEntryOperators;
+    }
+
+    public void addBranchManager(BranchManager branchManager) {
+        branchManagers.add(branchManager);
+        branch.incrementEmployeeCount();
+    }
+
+    public void addCashier(Cashier cashier) {
+        cashiers.add(cashier);
+        branch.incrementEmployeeCount();
+    }
+
+    public void addDataEntryOperator(DataEntryOperator dataEntryOperator) {
+        dataEntryOperators.add(dataEntryOperator);
+        branch.incrementEmployeeCount();
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1732349316491)
+++ b/.idea/workspace.xml	(date 1732349316491)
@@ -0,0 +1,201 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="4ea2db64-6a30-4e9f-adef-6222c9bc4c94" name="Changes" comment="updated schema">
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Metro-POS" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Bill.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Branch.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/BranchManagement.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/BranchManager.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Cashier.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/DataEntryOperator.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/METRO_POS_MAIN_CONTROLLER_CODE.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Product.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Report.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/SuperAdmin.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/Controller/Vendor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/ZAA/backend/Controller/SuperAdminController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/ZAA/backend/Model/BranchManagerModel.java" beforeDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="main" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="ROOT_SYNC" value="DONT_SYNC" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;AzfarNayyan&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/Z-A-A/Metro-POS&quot;,
+    &quot;accountId&quot;: &quot;6a738e78-ce0f-4b46-9663-9fcc85490c13&quot;
+  }
+}</component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="CurrentFile" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 1
+}</component>
+  <component name="ProjectId" id="2p72oZI34oyr1h0dWF33ko4Hca1" />
+  <component name="ProjectLevelVcsManager">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.METRO_POS_MAIN_CONTROLLER_CODE.executor": "Run",
+    "Application.Main.executor": "Run",
+    "Application.SuperAdminController.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "Merging ahmad",
+    "kotlin-language-version-configured": "true",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "SDKs",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.2",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="RunManager">
+    <configuration name="METRO_POS_MAIN_CONTROLLER_CODE" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="org.ZAA.Controller.METRO_POS_MAIN_CONTROLLER_CODE" />
+      <module name="METRO-POS" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="org.ZAA.Controller.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="org.ZAA.Controller.Main" />
+      <module name="METRO-POS" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="org.ZAA.Controller.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.METRO_POS_MAIN_CONTROLLER_CODE" />
+        <item itemvalue="Application.Main" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11" />
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="4ea2db64-6a30-4e9f-adef-6222c9bc4c94" name="Changes" comment="" />
+      <created>1732102970755</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1732102970755</updated>
+      <workItem from="1732102971788" duration="1421000" />
+      <workItem from="1732104456965" duration="5841000" />
+      <workItem from="1732119092361" duration="10000" />
+      <workItem from="1732292966594" duration="4843000" />
+      <workItem from="1732298206131" duration="6452000" />
+    </task>
+    <task id="LOCAL-00001" summary="Implemented Backend Object classes and Login, Signup and Branch creation functions.">
+      <option name="closed" value="true" />
+      <created>1732110897573</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1732110897573</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Implemented Backend Object classes and Login, Signup and Branch creation functions.">
+      <option name="closed" value="true" />
+      <created>1732111312955</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1732111312955</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="origin/azfar" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Implemented Backend Object classes and Login, Signup and Branch creation functions." />
+    <MESSAGE value="updated schema" />
+    <option name="LAST_COMMIT_MESSAGE" value="updated schema" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/org/ZAA/Controller/Bill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/ZAA/Controller/Bill.java b/src/main/java/org/ZAA/Controller/Bill.java
new file mode 100644
--- /dev/null	(date 1732348270786)
+++ b/src/main/java/org/ZAA/Controller/Bill.java	(date 1732348270786)
@@ -0,0 +1,6 @@
+package org.ZAA.Controller;
+
+public class Bill
+{
+
+}
\ No newline at end of file
